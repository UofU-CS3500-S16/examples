<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StringSocket</name>
    </assembly>
    <members>
        <member name="T:CustomNetworking.StringSocket">
             <summary> 
             A StringSocket is a wrapper around a Socket.  It provides methods that
             asynchronously read lines of text (strings terminated by newlines) and 
             write strings. (As opposed to Sockets, which read and write raw bytes.)  
            
             StringSockets are thread safe.  This means that two or more threads may
             invoke methods on a shared StringSocket without restriction.  The
             StringSocket takes care of the synchronization.
             
             Each StringSocket contains a Socket object that is provided by the client.  
             A StringSocket will work properly only if the client refrains from calling
             the contained Socket's read and write methods.
             
             If we have an open Socket s, we can create a StringSocket by doing
             
                StringSocket ss = new StringSocket(s, new UTF8Encoding());
             
             We can write a string to the StringSocket by doing
             
                ss.BeginSend("Hello world", callback, payload);
                
             where callback is a SendCallback (see below) and payload is an arbitrary object.
             This is a non-blocking, asynchronous operation.  When the StringSocket has 
             successfully written the string to the underlying Socket, or failed in the 
             attempt, it invokes the callback.  The parameters to the callback are a
             (possibly null) Exception and the payload.  If the Exception is non-null, it is
             the Exception that caused the send attempt to fail.
             
             We can read a string from the StringSocket by doing
             
                 ss.BeginReceive(callback, payload)
                 
             where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
             This is non-blocking, asynchronous operation.  When the StringSocket has read a
             string of text terminated by a newline character from the underlying Socket, or
             failed in the attempt, it invokes the callback.  The parameters to the callback are
             a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
             string or the Exception will be non-null, but nor both.  If the string is non-null, 
             it is the requested string (with the newline removed).  If the Exception is non-null, 
             it is the Exception that caused the send attempt to fail.
             </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.SendCallback">
            <summary>
            The type of delegate that is called when a send has completed.
            </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.ReceiveCallback">
            <summary>
            The type of delegate that is called when a receive has completed.
            </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.SendRequest">
            <summary>
            Contains information about a single queued send request
            </summary>
        </member>
        <member name="T:CustomNetworking.StringSocket.ReceiveRequest">
            <summary>
            Contains information about a singe queued receive request.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.#ctor(System.Net.Sockets.Socket,System.Text.Encoding)">
            <summary>
            Creates a StringSocket from a regular Socket, which should already be connected.  
            The read and write methods of the regular Socket must not be called after the
            StringSocket is created.  Otherwise, the StringSocket will not behave properly.  
            The encoding to use to convert between raw bytes and strings is also provided.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.Shutdown">
            <summary>
            Shuts down and closes the socket.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginSend(System.String,CustomNetworking.StringSocket.SendCallback,System.Object)">
            <summary>
            We can write a string to a StringSocket ss by doing
            
               ss.BeginSend("Hello world", callback, payload);
               
            where callback is a SendCallback (see below) and payload is an arbitrary object.
            This is a non-blocking, asynchronous operation.  When the StringSocket has 
            successfully written the string to the underlying Socket, or failed in the 
            attempt, it invokes the callback.  The parameters to the callback are a
            (possibly null) Exception and the payload.  If the Exception is non-null, it is
            the Exception that caused the send attempt to fail. 
            
            This method is non-blocking.  This means that it does not wait until the string
            has been sent before returning.  Instead, it arranges for the string to be sent
            and then returns.  When the send is completed (at some time in the future), the
            callback is called on another thread.
            
            This method is thread safe.  This means that multiple threads can call BeginSend
            on a shared socket without worrying around synchronization.  The implementation of
            BeginSend must take care of synchronization instead.  On a given StringSocket, each
            string arriving via a BeginSend method call must be sent (in its entirety) before
            a later arriving string can be sent.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ProcessSendQueue">
            <summary>
            This should be called only after a lock on sendRequests has been acquired.
            It pings back and forth with the BytesSent callback to send out all the strings in
            the queue.  This method gets the string at the front of the queue and attempts
            to send it.  BytesSent takes care of making sure all of the bytes are actually sent
            before calling this method again to send the next string. 
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BytesSent(System.IAsyncResult)">
            <summary>
            This method is the callback used when bytes are being sent.  It makes sure that all of
            the bytes have been sent, then calls the appropriate callback and calls ProcessSendQueue.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BeginReceive(CustomNetworking.StringSocket.ReceiveCallback,System.Object,System.Int32)">
            <summary>
            We can read a string from the StringSocket by doing
            
                ss.BeginReceive(callback, payload)
                
            where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
            This is non-blocking, asynchronous operation.  When the StringSocket has read a
            string of text terminated by a newline character from the underlying Socket, or
            failed in the attempt, it invokes the callback.  The parameters to the callback are
            a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
            string or the Exception will be null, or possibly boh.  If the string is non-null, 
            it is the requested string (with the newline removed).  If the Exception is non-null, 
            it is the Exception that caused the send attempt to fail.  If both are null, this
            indicates that the sending end of the remote socket has been shut down.
            
            This method is non-blocking.  This means that it does not wait until a line of text
            has been received before returning.  Instead, it arranges for a line to be received
            and then returns.  When the line is actually received (at some time in the future), the
            callback is called on another thread.
            
            This method is thread safe.  This means that multiple threads can call BeginReceive
            on a shared socket without worrying around synchronization.  The implementation of
            BeginReceive must take care of synchronization instead.  On a given StringSocket, each
            arriving line of text must be passed to callbacks in the order in which the corresponding
            BeginReceive call arrived.
            
            Note that it is possible for there to be incoming bytes arriving at the underlying Socket
            even when there are no pending callbacks.  StringSocket implementations should refrain
            from buffering an unbounded number of incoming bytes beyond what is required to service
            the pending callbacks.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ProcessReceiveQueue">
            <summary>
            This  tries to fill requests with text on hand and then, if there are still
            requests remaining, requests more data from the underlying socket.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.ExtractChunk(System.Int32)">
            <summary>
            Extracts a string of the specified length from the queued lines plus the incomplete line.
            </summary>
        </member>
        <member name="M:CustomNetworking.StringSocket.BytesReceived(System.IAsyncResult)">
            <summary>
            This private method is the callback for the receive attempts.
            </summary>
        </member>
    </members>
</doc>
