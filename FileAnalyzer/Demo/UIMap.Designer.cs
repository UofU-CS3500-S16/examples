// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Demo
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinListItem uIFileAnalyzerShortcutListItem = this.UIProgramManagerWindow.UIDesktopList.UIFileAnalyzerShortcutListItem;
            WinMenuItem uIOpenMenuItem = this.UIFileAnalyzerWindow.UIMenuBarMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITwoCitiesListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinEdit uISubstringBoxEdit = this.UIFileAnalyzerWindow.UISubstringBoxWindow.UISubstringBoxEdit;
            WinButton uICountButton = this.UIFileAnalyzerWindow.UICountWindow.UICountButton;
            #endregion

            // Double-Click 'FileAnalyzer - Shortcut' list item
            Mouse.DoubleClick(uIFileAnalyzerShortcutListItem, new Point(53, 33));

            // Double-Click 'FileAnalyzer - Shortcut' list item
            Mouse.DoubleClick(uIFileAnalyzerShortcutListItem, new Point(40, 27));

            // Launch '%USERPROFILE%\Source\CS 3500 S16\examples\FileAnalyzer\FileAnalyzer5\bin\Debug\FileAnalyzer.exe'
            ApplicationUnderTest uIFileAnalyzerWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIFileAnalyzerWindowExePath, this.RecordedMethod1Params.UIFileAnalyzerWindowAlternateExePath);

            // Click 'File' -> 'Open ...' menu item
            Mouse.Click(uIOpenMenuItem, new Point(53, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(43, 18));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(41, 15));

            // Type 'the' in 'substringBox' text box
            uISubstringBoxEdit.Text = this.RecordedMethod1Params.UISubstringBoxEditText;

            // Click 'Count' button
            Mouse.Click(uICountButton, new Point(32, 12));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uISubstringCountEdit = this.UIFileAnalyzerWindow.UISubstringCountWindow.UISubstringCountEdit;
            #endregion

            // Verify that the 'Text' property of 'substringCount' text box equals '10694'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UISubstringCountEditText, uISubstringCountEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIFileAnalyzerWindow.UICUserszacharyDocumenTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 3));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIFileAnalyzerWindow UIFileAnalyzerWindow
        {
            get
            {
                if ((this.mUIFileAnalyzerWindow == null))
                {
                    this.mUIFileAnalyzerWindow = new UIFileAnalyzerWindow();
                }
                return this.mUIFileAnalyzerWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIFileAnalyzerWindow mUIFileAnalyzerWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\CS 3500 S16\examples\FileAnalyzer\FileAnalyzer5\bin\Debug\FileAnalyzer.exe'
        /// </summary>
        public string UIFileAnalyzerWindowExePath = "C:\\Users\\zachary\\Source\\CS 3500 S16\\examples\\FileAnalyzer\\FileAnalyzer5\\bin\\Debug" +
            "\\FileAnalyzer.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\CS 3500 S16\examples\FileAnalyzer\FileAnalyzer5\bin\Debug\FileAnalyzer.exe'
        /// </summary>
        public string UIFileAnalyzerWindowAlternateExePath = "%USERPROFILE%\\Source\\CS 3500 S16\\examples\\FileAnalyzer\\FileAnalyzer5\\bin\\Debug\\Fi" +
            "leAnalyzer.exe";
        
        /// <summary>
        /// Type 'the' in 'substringBox' text box
        /// </summary>
        public string UISubstringBoxEditText = "the";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'substringCount' text box equals '10694'
        /// </summary>
        public string UISubstringCountEditText = "10694";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIFileAnalyzerShortcutListItem
        {
            get
            {
                if ((this.mUIFileAnalyzerShortcutListItem == null))
                {
                    this.mUIFileAnalyzerShortcutListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIFileAnalyzerShortcutListItem.SearchProperties[WinListItem.PropertyNames.Name] = "FileAnalyzer - Shortcut";
                    this.mUIFileAnalyzerShortcutListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIFileAnalyzerShortcutListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIFileAnalyzerShortcutListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileAnalyzerWindow : WinWindow
    {
        
        public UIFileAnalyzerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Analyzer";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("File Analyzer");
            this.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UISubstringBoxWindow UISubstringBoxWindow
        {
            get
            {
                if ((this.mUISubstringBoxWindow == null))
                {
                    this.mUISubstringBoxWindow = new UISubstringBoxWindow(this);
                }
                return this.mUISubstringBoxWindow;
            }
        }
        
        public UICountWindow UICountWindow
        {
            get
            {
                if ((this.mUICountWindow == null))
                {
                    this.mUICountWindow = new UICountWindow(this);
                }
                return this.mUICountWindow;
            }
        }
        
        public UISubstringCountWindow UISubstringCountWindow
        {
            get
            {
                if ((this.mUISubstringCountWindow == null))
                {
                    this.mUISubstringCountWindow = new UISubstringCountWindow(this);
                }
                return this.mUISubstringCountWindow;
            }
        }
        
        public UICUserszacharyDocumenTitleBar UICUserszacharyDocumenTitleBar
        {
            get
            {
                if ((this.mUICUserszacharyDocumenTitleBar == null))
                {
                    this.mUICUserszacharyDocumenTitleBar = new UICUserszacharyDocumenTitleBar(this);
                }
                return this.mUICUserszacharyDocumenTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        
        private UISubstringBoxWindow mUISubstringBoxWindow;
        
        private UICountWindow mUICountWindow;
        
        private UISubstringCountWindow mUISubstringCountWindow;
        
        private UICUserszacharyDocumenTitleBar mUICUserszacharyDocumenTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuBarMenuBar : WinMenuBar
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("File Analyzer");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("File Analyzer");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open ...";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("File Analyzer");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISubstringBoxWindow : WinWindow
    {
        
        public UISubstringBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "substringBox";
            this.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
            #endregion
        }
        
        #region Properties
        public WinEdit UISubstringBoxEdit
        {
            get
            {
                if ((this.mUISubstringBoxEdit == null))
                {
                    this.mUISubstringBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISubstringBoxEdit.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
                    #endregion
                }
                return this.mUISubstringBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISubstringBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICountWindow : WinWindow
    {
        
        public UICountWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "countButton";
            this.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
            #endregion
        }
        
        #region Properties
        public WinButton UICountButton
        {
            get
            {
                if ((this.mUICountButton == null))
                {
                    this.mUICountButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICountButton.SearchProperties[WinButton.PropertyNames.Name] = "Count";
                    this.mUICountButton.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
                    #endregion
                }
                return this.mUICountButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICountButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISubstringCountWindow : WinWindow
    {
        
        public UISubstringCountWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "substringCount";
            this.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
            #endregion
        }
        
        #region Properties
        public WinEdit UISubstringCountEdit
        {
            get
            {
                if ((this.mUISubstringCountEdit == null))
                {
                    this.mUISubstringCountEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISubstringCountEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Substrings";
                    this.mUISubstringCountEdit.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
                    #endregion
                }
                return this.mUISubstringCountEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISubstringCountEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICUserszacharyDocumenTitleBar : WinTitleBar
    {
        
        public UICUserszacharyDocumenTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\zachary\\Documents\\TwoCities.txt");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITwoCitiesListItem UITwoCitiesListItem
        {
            get
            {
                if ((this.mUITwoCitiesListItem == null))
                {
                    this.mUITwoCitiesListItem = new UITwoCitiesListItem(this);
                }
                return this.mUITwoCitiesListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITwoCitiesListItem mUITwoCitiesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITwoCitiesListItem : WinListItem
    {
        
        public UITwoCitiesListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "TwoCities";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
}
